import operator

from aiogram import F
from aiogram.enums import ContentType
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import MessageInput, TextInput
from aiogram_dialog.widgets.kbd import (
    Back,
    Button,
    Cancel,
    Column,
    Group,
    Next,
    Radio,
    Select,
    Start,
    SwitchTo,
)
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Format, Jinja

from db import empl_service
from . import getters, handlers, states

CANCEL_EDIT = SwitchTo(
    Const("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
    when=F["dialog_data"]["finished"],
    id="cnl_edt",
    state=states.NewSG.preview,
)

JINJA_TEMPLATE = Jinja(
    "{% set dttm_list = item.created.split() %}"
    '{% set dt_list = dttm_list[0].split("-") %}'
    '{% set dt = dt_list[2]+"."+dt_list[1] %}'
    '{% set d = "\U0000231b" if item.status == "–æ—Ç–ª–æ–∂–µ–Ω–æ" else "" %}'
    '{% set st = "\U00002705" if item.status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "\U0001f7e9" if item.status == '
    '"–≤ —Ä–∞–±–æ—Ç–µ" else "" %}'
    '{% set sl = item.username if item.username else "\U00002753" %}'
    '{% set pr = item.priority if item.priority else "" %}'
    '{% set ob = item.name if item.name else "" %}'
    '{% set tt = item.title if item.title else "" %}'
    '{% set ag = "\U00002757\U0001f4de\U00002757" if item.agreement else "" %}'
    "{{ag}}{{d}}{{st}} {{dt}} {{pr}} {{sl}} {{ob}} {{tt}}"
)


new = Dialog(
    Window(
        Const(
            "–í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞/–æ–±—ä–µ–∫—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç—å."
        ),
        MessageInput(handlers.ent_name_handler, content_types=[ContentType.TEXT]),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        state=NewSG.entity_choice,
    ),
    Window(
        Const("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:"),
        Column(
            Radio(
                Format("üîò {item[name]}"),
                Format("‚ö™Ô∏è {item[name]}"),
                id="choose_entity",
                item_id_getter=lambda item: item["ent_id"],
                items="entities",
                on_click=handlers.on_entity,
            ),
        ),
        Button(
            Const("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm_entity", on_click=handlers.next_or_end
        ),
        Next(Const("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–±—ä–µ–∫—Ç–∞")),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        state=states.NewSG.entities,
        getter=getters.entitites,
    ),
    Window(
        Const("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"),
        TextInput(id="phone_input", on_success=handlers.next_or_end),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        Cancel(Const("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")),
        state=states.NewSG.phone,
    ),
    Window(
        Const("–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è?"),
        TextInput(id="title_input", on_success=handlers.next_or_end),
        CANCEL_EDIT,
        Back(Const("–ù–∞–∑–∞–¥")),
        Cancel(Const("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")),
        state=states.NewSG.title,
    ),
    Window(
        Const(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞."
        ),
        MessageInput(
            handlers.task_description_handler, content_types=[ContentType.ANY]
        ),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        Cancel(Const("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")),
        state=states.NewSG.description,
    ),
    Window(
        Const("–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:"),
        Radio(
            Format("üîò {item[0]}"),
            Format("‚ö™Ô∏è {item[0]}"),
            id="ch_prior",
            item_id_getter=operator.itemgetter(1),
            items="priorities",
            on_click=handlers.on_priority,
        ),
        Button(
            Const("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm_priority", on_click=handlers.next_or_end
        ),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        getter=getters.priority,
        state=states.NewSG.priority,
    ),
    Window(
        Const("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–∫—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:"),
        Radio(
            Format("üîò {item[0]}"),
            Format("‚ö™Ô∏è {item[0]}"),
            id="act_nssr",
            item_id_getter=lambda x: x[1],
            items="act_nssr",
            on_click=handlers.on_act,
        ),
        Button(Const("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm_act", on_click=handlers.next_or_end),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        getter=getters.acts,
        state=states.NewSG.act,
    ),
    Window(
        Const("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"),
        Column(
            Radio(
                Format("üîò {item[username]}"),
                Format("‚ö™Ô∏è {item[username]}"),
                id="choose_slave",
                item_id_getter=lambda item: item["userid"],
                items="slaves",
                on_click=handlers.on_slave,
            ),
        ),
        Button(
            Const("–£–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"),
            id="del_performer",
            on_click=handlers.on_del_performer,
        ),
        Button(Const("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm_slave", on_click=handlers.next_or_end),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        state=states.NewSG.performer,
        getter=getters.slaves,
    ),
    Window(
        Const("–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å –∫–µ–º:"),
        Column(
            Radio(
                Format("üîò {item}"),
                Format("‚ö™Ô∏è {item}"),
                id="agreementers",
                item_id_getter=lambda item: item,
                items="agreementers",
                on_click=handlers.on_agreementer,
            )
        ),
        Button(
            Const("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
            id="confirm_agreementer",
            on_click=handlers.next_or_end,
        ),
        Back(Const("–ù–∞–∑–∞–¥")),
        CANCEL_EDIT,
        state=states.NewSG.agreement,
        getter=getters.agreementers,
    ),
    Window(
        Jinja("""–í–∞—à–∞ –∑–∞—è–≤–∫–∞:

        <b>–û–±—ä–µ–∫—Ç</b>: {{entity if entity else ''}}
        <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {{phone if phone else ''}}
        <b>–¢–µ–º–∞</b>: {{title if title else ''}}
        <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {{description if description else ''}}
        <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>: {{priority if priority else ''}}
        <b>–†–∞–±–æ—Ç–Ω–∏–∫</b>: {{username if username else ''}}
        <b>–ê–∫—Ç</b>: {{'–î–∞' if act else '–ù–µ—Ç'}}
        <b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ</b>: {{agreement if agreement else ''}}
        """),
        Start(
            Const("–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞"),
            id="to_multimedia",
            state=states.MediaSG.main,
            when="media_id",
        ),
        Button(Const("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), id="confirm_creating", on_click=handlers.on_confirm),
        SwitchTo(
            Const("–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç"), id="to_entity", state=states.NewSG.entity_choice
        ),
        SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"), id="to_phone", state=states.NewSG.phone),
        SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –¢–µ–º—É"), id="to_title", state=states.NewSG.title),
        SwitchTo(
            Const("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"), id="to_priority", state=states.NewSG.priority
        ),
        SwitchTo(Const("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–∫—Ç–∞"), id="to_act", state=states.NewSG.act),
        SwitchTo(
            Const("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
            id="to_description",
            state=states.NewSG.description,
        ),
        SwitchTo(
            Const("–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"), id="to_slave", state=states.NewSG.performer
        ),
        SwitchTo(
            Const("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"),
            id="to_agreement",
            state=states.NewSG.agreement,
        ),
        Cancel(Const("–û—Ç–º–µ–Ω–∞")),
        state=states.NewSG.preview,
        getter=getters.result,
        parse_mode="html",
    ),
    on_start=handlers.on_start,
)


def user_is_operator(data, widget, dialog_manager: DialogManager) -> bool:
    user: dict = empl_service.get_employee(userid=dialog_manager.event.from_user.id)
    return user.get("status") == "operator"


def user_is_performer(data, widget, dialog_manager: DialogManager) -> bool:
    user: dict = empl_service.get_employee(userid=dialog_manager.event.from_user.id)
    return user.get("status") == "worker"


tasks = Dialog(
    Window(
        Format("{wintitle}"),
        Column(
            Select(
                JINJA_TEMPLATE,
                id="sel_task",
                item_id_getter=lambda x: x.get("taskid"),
                items="tasks",
                on_click=handlers.on_task
            )
        ),
        Button(Const("–û–±–Ω–æ–≤–∏—Ç—å"), id="reload_tasks"),
        Cancel(Const("–ù–∞–∑–∞–¥")),
        state=states.TasksSG.tasks,
        getter=getters.tasks,
    ),
    Window(
        Const("–ó–∞—è–≤–∫–∞: \n"),
        Format("{created}"),
        Format("–¢–µ–º–∞: {title}"),
        Format("–û–±—ä–µ–∫—Ç: {name}", when="name"),
        Format("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {username}", when="username"),
        Const("<b>–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!</b>", when="priority"),
        Format("–°—Ç–∞—Ç—É—Å: {status}"),
        Format("–ù—É–∂–µ–Ω –∞–∫—Ç", when="act"),
        Format("<b><i><u>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {agreement}</u></i></b>", when="agreement"),
        Format("\n <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é:</b> \n {summary}", when="summary"),
        Start(
            Const("–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"),
            id="mm_description",
            state=states.MediaSG.main,
            when="media_id",
        ),
        Start(
            Const("–í–∏–¥–µ–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"),
            id="to_media",
            state=states.MediaSG.main,
            when="resultid",
        ),
        Start(Const("–ê–∫—Ç"), id="act", state=states.MediaSG.main, when="actid"),
        Group(
            Button(
                Const("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                id="edit_task",
                on_click=handlers.edit_task,
                when=(F["status"] != "–∑–∞–∫—Ä—ã—Ç–æ"),
            ),
            Button(
                Const("–û—Ç–ª–æ–∂–∏—Ç—å"),
                id="delay_task",
                on_click=handlers.on_delay,
                when=(F["status"] != "–æ—Ç–ª–æ–∂–µ–Ω–æ"),
            ),
            Start(Const('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤'), id='close_task', state=None, data={'taskid'}),
            # Button(
            #     Const("–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤"),
            #     id="close_task",
            #     on_click=handlers.to_confirmation,
            #     when=(F["status"] != "–∑–∞–∫—Ä—ã—Ç–æ"),
            # ),
            Button(
                Const("–í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É"),
                id="return_to_work",
                on_click=on_return,
                when=(F["status"] == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"),
            ),
            when=user_is_operator,
        ),
        Group(
            when=user_is_performer,
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=states.TaskSG.task,
        getter=getters.task,
    ),
)


media = Dialog(
    Window(
        DynamicMedia("media"),
        Cancel(Const("–ù–∞–∑–∞–¥")),
        state=states.MediaSG.main,
        getter=getters.media,
    )
)
